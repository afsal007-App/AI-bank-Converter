{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOXD22xgHo7501cdOGPmfc+",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "f5e0ff548b9d43c59021aaf2d895e979": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "ButtonView",
            "button_style": "",
            "description": "Download Extracted Transactions",
            "disabled": false,
            "icon": "",
            "layout": "IPY_MODEL_3b120f95843e4343bfa612e926d75cd5",
            "style": "IPY_MODEL_6cc7b6f18b994325a6a2188a5dcb2cd5",
            "tooltip": ""
          }
        },
        "3b120f95843e4343bfa612e926d75cd5": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "6cc7b6f18b994325a6a2188a5dcb2cd5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "ButtonStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "ButtonStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "button_color": null,
            "font_weight": ""
          }
        }
      }
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/afsal007-App/AI-bank-Converter/blob/main/Emirates_Islamic_bank.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403,
          "referenced_widgets": [
            "f5e0ff548b9d43c59021aaf2d895e979",
            "3b120f95843e4343bfa612e926d75cd5",
            "6cc7b6f18b994325a6a2188a5dcb2cd5"
          ]
        },
        "id": "aZaCZPMwhWRz",
        "outputId": "99032084-3f36-43ae-c4ea-cc7b71bd0e27"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-a2930961-11eb-41e2-9c29-6ac07c55f06c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-a2930961-11eb-41e2-9c29-6ac07c55f06c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Account_Details_03Mar2025_135405.pdf to Account_Details_03Mar2025_135405 (14).pdf\n",
            "Saving Account_Details_03Mar2025_135525.pdf to Account_Details_03Mar2025_135525 (15).pdf\n",
            "Saving Account_Details_03Mar2025_135456.pdf to Account_Details_03Mar2025_135456 (15).pdf\n",
            "Saving Account_Details_25Feb2025_135400.pdf to Account_Details_25Feb2025_135400 (17).pdf\n",
            "Saving Account_Details_25Feb2025_135528.pdf to Account_Details_25Feb2025_135528 (17).pdf\n",
            "Saving Account_Details_25Feb2025_135608.pdf to Account_Details_25Feb2025_135608 (17).pdf\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Button(description='Download Extracted Transactions', style=ButtonStyle())"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f5e0ff548b9d43c59021aaf2d895e979"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_f7398027-fc6f-41ce-ab6b-df6dfc707f51\", \"Extracted_Transactions.csv\", 32947)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import pdfplumber\n",
        "import PyPDF2\n",
        "import fitz  # PyMuPDF\n",
        "import pandas as pd\n",
        "import io\n",
        "import re\n",
        "import ipywidgets as widgets\n",
        "from IPython.display import display\n",
        "from google.colab import files\n",
        "from google.colab.data_table import DataTable  # Replaces ace_tools\n",
        "\n",
        "# Regular expression to match transaction entries (horizontal format)\n",
        "transaction_pattern_horizontal = re.compile(\n",
        "    r\"(\\d{2}-\\d{2}-\\d{4})\\s+(\\d{2}-\\d{2}-\\d{4})\\s+(.+?)\\s+([\\d,]+\\.\\d{2})?\\s+([\\d,]+\\.\\d{2})?\\s+([\\d,]+\\.\\d{2})?\"\n",
        ")\n",
        "\n",
        "# Function to extract text using PyPDF2\n",
        "def extract_text_pypdf2(pdf_bytes):\n",
        "    text = \"\"\n",
        "    pdf_bytes.seek(0)  # Reset the BytesIO position\n",
        "    reader = PyPDF2.PdfReader(pdf_bytes)\n",
        "    for page in reader.pages:\n",
        "        text += page.extract_text() + \"\\n\"\n",
        "    return text\n",
        "\n",
        "# Function to extract text using PyMuPDF (fitz)\n",
        "def extract_text_pymupdf(pdf_bytes):\n",
        "    text = \"\"\n",
        "    pdf_bytes.seek(0)  # Reset the BytesIO position\n",
        "    doc = fitz.open(stream=pdf_bytes, filetype=\"pdf\")\n",
        "    for page in doc:\n",
        "        text += page.get_text(\"text\") + \"\\n\"\n",
        "    return text\n",
        "\n",
        "# Function to extract text using pdfplumber\n",
        "def extract_text_pdfplumber(pdf_bytes):\n",
        "    text = \"\"\n",
        "    pdf_bytes.seek(0)  # Reset the BytesIO position\n",
        "    with pdfplumber.open(pdf_bytes) as pdf:\n",
        "        for page in pdf.pages:\n",
        "            text += page.extract_text() + \"\\n\"\n",
        "    return text\n",
        "\n",
        "# Function to extract transactions from text (horizontal format)\n",
        "def extract_transactions_horizontal(text):\n",
        "    transactions = []\n",
        "    lines = text.split(\"\\n\")\n",
        "\n",
        "    for i in range(len(lines)):\n",
        "        match = transaction_pattern_horizontal.match(lines[i])\n",
        "        if match:\n",
        "            transaction_date = match.group(1).strip()\n",
        "            value_date = match.group(2).strip()\n",
        "            narration = match.group(3).strip()\n",
        "            debit_amount = match.group(4) or \"0.00\"\n",
        "            credit_amount = match.group(5) or \"0.00\"\n",
        "            running_balance = match.group(6) or \"0.00\"\n",
        "            transactions.append([transaction_date, value_date, narration, debit_amount, credit_amount, running_balance])\n",
        "\n",
        "    return transactions\n",
        "\n",
        "# Function to extract transactions using a vertical method (table-based)\n",
        "def extract_transactions_vertical(pdf_bytes):\n",
        "    transactions = []\n",
        "    pdf_bytes.seek(0)  # Reset the BytesIO position\n",
        "    with pdfplumber.open(pdf_bytes) as pdf:\n",
        "        for page in pdf.pages:\n",
        "            table = page.extract_table()\n",
        "            if table:\n",
        "                for row in table:\n",
        "                    if len(row) >= 6:  # Ensure it's a valid transaction row\n",
        "                        transactions.append(row)\n",
        "\n",
        "    return transactions\n",
        "\n",
        "# Function to process multiple PDFs\n",
        "def process_pdfs(pdf_files):\n",
        "    all_transactions = []\n",
        "\n",
        "    for pdf_file in pdf_files:\n",
        "        # Try extracting text using multiple methods\n",
        "        text_pypdf2 = extract_text_pypdf2(pdf_file)\n",
        "        text_pymupdf = extract_text_pymupdf(pdf_file)\n",
        "        text_pdfplumber = extract_text_pdfplumber(pdf_file)\n",
        "\n",
        "        # Choose the longest extracted text (most complete)\n",
        "        text = max([text_pypdf2, text_pymupdf, text_pdfplumber], key=len)\n",
        "\n",
        "        # Extract transactions using horizontal method\n",
        "        transactions_horizontal = extract_transactions_horizontal(text)\n",
        "\n",
        "        # Extract transactions using vertical method\n",
        "        transactions_vertical = extract_transactions_vertical(pdf_file)\n",
        "\n",
        "        # Combine results\n",
        "        all_transactions.extend(transactions_horizontal)\n",
        "        all_transactions.extend(transactions_vertical)\n",
        "\n",
        "    # Create DataFrame\n",
        "    columns = [\"Transaction Date\", \"Value Date\", \"Narration\", \"Debit Amount\", \"Credit Amount\", \"Running Balance\"]\n",
        "    df = pd.DataFrame(all_transactions, columns=columns)\n",
        "\n",
        "    # Convert Transaction Date to datetime and sort\n",
        "    df[\"Transaction Date\"] = pd.to_datetime(df[\"Transaction Date\"], format=\"%d-%m-%Y\", errors=\"coerce\")\n",
        "    df = df.sort_values(by=\"Transaction Date\", ascending=True)\n",
        "\n",
        "    return df\n",
        "\n",
        "# Upload multiple PDF files\n",
        "uploaded_files = files.upload()\n",
        "\n",
        "# Process all uploaded PDFs\n",
        "pdf_paths = [io.BytesIO(uploaded_files[file]) for file in uploaded_files]\n",
        "df_final = process_pdfs(pdf_paths)\n",
        "\n",
        "# Display DataFrame in Google Colab with full preview\n",
        "DataTable(df_final)  # Interactive preview replaces ace_tools\n",
        "\n",
        "# Save DataFrame as CSV in Google Colab's working directory\n",
        "csv_filename = \"Extracted_Transactions.csv\"\n",
        "df_final.to_csv(csv_filename, index=False)\n",
        "\n",
        "# Create Download Button\n",
        "def download_file(b):\n",
        "    files.download(csv_filename)\n",
        "\n",
        "download_button = widgets.Button(description=\"Download Extracted Transactions\")\n",
        "download_button.on_click(download_file)\n",
        "display(download_button)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pymupdf PyPDF2 pdfplumber pandas\n",
        "!pip install ace-tools # Install ace_tools using pip\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GCdbGzechpXT",
        "outputId": "eadba69c-622c-4940-9b5f-47c5ba9c0686"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pymupdf in /usr/local/lib/python3.11/dist-packages (1.25.3)\n",
            "Requirement already satisfied: PyPDF2 in /usr/local/lib/python3.11/dist-packages (3.0.1)\n",
            "Requirement already satisfied: pdfplumber in /usr/local/lib/python3.11/dist-packages (0.11.5)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n",
            "Requirement already satisfied: pdfminer.six==20231228 in /usr/local/lib/python3.11/dist-packages (from pdfplumber) (20231228)\n",
            "Requirement already satisfied: Pillow>=9.1 in /usr/local/lib/python3.11/dist-packages (from pdfplumber) (11.1.0)\n",
            "Requirement already satisfied: pypdfium2>=4.18.0 in /usr/local/lib/python3.11/dist-packages (from pdfplumber) (4.30.1)\n",
            "Requirement already satisfied: charset-normalizer>=2.0.0 in /usr/local/lib/python3.11/dist-packages (from pdfminer.six==20231228->pdfplumber) (3.4.1)\n",
            "Requirement already satisfied: cryptography>=36.0.0 in /usr/local/lib/python3.11/dist-packages (from pdfminer.six==20231228->pdfplumber) (43.0.3)\n",
            "Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n",
            "Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.11/dist-packages (from cryptography>=36.0.0->pdfminer.six==20231228->pdfplumber) (1.17.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12->cryptography>=36.0.0->pdfminer.six==20231228->pdfplumber) (2.22)\n",
            "Collecting ace-tools\n",
            "  Downloading ace_tools-0.0-py3-none-any.whl.metadata (300 bytes)\n",
            "Downloading ace_tools-0.0-py3-none-any.whl (1.1 kB)\n",
            "Installing collected packages: ace-tools\n",
            "Successfully installed ace-tools-0.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hNyS61DQ72hE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}